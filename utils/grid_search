import numpy as np
from scipy.io import loadmat


# Do a grid-search
struct = loadmat('data/rectilinear_kernels.mat')
kernel_list = struct['kernel_list']
best_err = np.inf
for i1 in range(20):
	for j1 in range(18):
		k0 = np.reshape(kernel_list[i1,j1,:], [64,64])
		k0 = k0/np.sum(np.ravel(k0))
		err = estimate_err_nb(y, yn, k0, M, blind_deconv.non_blind_solver)
		if err < best_err:
			best_err = err
			best_k = k0
			print('best error yet')
			print(i1,j1,err*1e3)